#include <iostream>
using namespace std;

// функция перестановки, принимает на вход динамический массив шариков и количество шариков
// Идея функции перестановки:
// 1) рассматриваем массив справа налево, до тех пор пока каждый следующий элемент
// был не больше предыдущего
// 2) снова рассматрвиаем массив справа налево, до тех пор пока не найдем число, которое 
// будет больше найденного на предыдущем шаге
// 3) меняем местами эти два числа
// 4) сортируем часть массива, которая справа от найденного числа в 1 пункте. Зачем? Смотри текстовый файл
bool NextSet(int* a, int n)
{
	int j = n - 2;

	while (j != -1 && a[j] >= a[j + 1]) 
	{
		j--; 
	}

	if (j == -1)
	{
		return false; // больше перестановок нет
	}

	int k = n - 1;

	while (a[j] >= a[k]) 
	{
		k--; 
	}
	swap(a[j], a[k]);

	int l = j + 1, r = n - 1; // сортируем оставшуюся часть последовательности
	while (l < r)
	{
		swap(a[l++], a[r--]);
	}
	return true;
}

int main()
{
	bool flag = false;
	int n, * a, count = 1; // n - количество шариков, a - динамический массив с номерами шариков,
						   // count -  количество совпадений (равна 1, т.к. иисходная перестановка всегда удовлетворяет условию
	cout << "Enter balls number: ";
	cin >> n;
	a = new int[n]; // создаем динамический массив

	// здесь мы присваиваем каждому шарику свой номер
	for (int i = 0; i < n; i++)
	{
		a[i] = i + 1;
	}

	while (NextSet(a, n))
	{
		for (int i = 0; i < n; i++) // проходим по всему массиву и проверяем: нет ли совпадений
		{
			//cout << a[i] << " ";
			if (a[i] == i+1) // если номер шарика совпадает с номером вынимания шарика, мы falg = true, мы не можем здесь увеличивать счетчик, 
							 // т.к. по условию задачи нам нужно, чтобы в перестановке было хотя бы одно совпадение,
							 // если мы будем увеличивать счетчик здесь, то программа будет считать все совпадения,
							 // например, в состоянии 1 2 3 4 5 6 7 8 9 10 программа насчитает 10 совпадений, а должна была только 1. 
							 // В таком случае ответ программы будет намного больше реального значения.
			{
				flag = true;
			}
		}
		if (flag)
		{
			//cout << "#";
			count++;
		}
		flag = false;
		//cout << endl;
	}


	cout << "Answer = " << count << endl;
	system("pause");
	return 0;
}
